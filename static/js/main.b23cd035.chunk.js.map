{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","isSweeping","setIsSweeping","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","acc","findIndex","prev","unshift","push","sweepRows","boxShadowSweepEffect","keyframes","animation","css","StyledCell","props","type","Cell","React","memo","StyledStage","height","width","Stage","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","calcScore","linePoints","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","keyUp","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b23cd035.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n\tArray.from(Array(STAGE_HEIGHT), () =>\n\t\tnew Array(STAGE_WIDTH).fill([0, \"clear\"])\n\t);\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n\tfor (let y = 0; y < player.tetromino.length; y += 1) {\n\t\tfor (let x = 0; x < player.tetromino[y].length; x += 1) {\n\t\t\t// 1. Check that we're on an actual Tetromino cell\n\t\t\tif (player.tetromino[y][x] !== 0) {\n\t\t\t\tif (\n\t\t\t\t\t// 2. Check that our move is inside the game areas height (y)\n\t\t\t\t\t// We shouldn't go through the bottom of the play area\n\t\t\t\t\t!stage[y + player.pos.y + moveY] ||\n\t\t\t\t\t// 3. Check that our move is inside the game areas width (x)\n\t\t\t\t\t!stage[y + player.pos.y + moveY][\n\t\t\t\t\t\tx + player.pos.x + moveX\n\t\t\t\t\t] ||\n\t\t\t\t\t// 4. Check that the cell wer'e moving to isn't set to clear\n\t\t\t\t\tstage[y + player.pos.y + moveY][\n\t\t\t\t\t\tx + player.pos.x + moveX\n\t\t\t\t\t][1] !== \"clear\"\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n","import styled from \"styled-components\";\n\nexport const StyledTetrisWrapper = styled.div`\n\twidth: 100vw;\n\theight: 100vh;\n\tbackground: #000;\n\toverflow: hidden;\n`;\n\nexport const StyledTetris = styled.div`\n\tdisplay: flex;\n\talign-items: flex-start;\n\tpadding: 40px;\n\tmargin: 0 auto;\n\tmax-width: 900px;\n\n\taside {\n\t\twidth: 100%;\n\t\tmax-width: 200px;\n\t\tdisplay: block;\n\t\tpadding: 0 20px;\n\t}\n`;\n","export const TETROMINOS = {\n\t0: { shape: [[0]], color: \"0, 0, 0\" },\n\tI: {\n\t\tshape: [\n\t\t\t[0, \"I\", 0, 0],\n\t\t\t[0, \"I\", 0, 0],\n\t\t\t[0, \"I\", 0, 0],\n\t\t\t[0, \"I\", 0, 0],\n\t\t],\n\t\tcolor: \"80, 227, 230\",\n\t},\n\tJ: {\n\t\tshape: [\n\t\t\t[0, \"J\", 0],\n\t\t\t[0, \"J\", 0],\n\t\t\t[\"J\", \"J\", 0],\n\t\t],\n\t\tcolor: \"36, 95, 223\",\n\t},\n\tL: {\n\t\tshape: [\n\t\t\t[0, \"L\", 0],\n\t\t\t[0, \"L\", 0],\n\t\t\t[0, \"L\", \"L\"],\n\t\t],\n\t\tcolor: \"223, 173, 36\",\n\t},\n\tO: {\n\t\tshape: [\n\t\t\t[\"O\", \"O\"],\n\t\t\t[\"O\", \"O\"],\n\t\t],\n\t\tcolor: \"223, 217, 36\",\n\t},\n\tS: {\n\t\tshape: [\n\t\t\t[0, \"S\", \"S\"],\n\t\t\t[\"S\", \"S\", 0],\n\t\t\t[0, 0, 0],\n\t\t],\n\t\tcolor: \"48, 211, 56\",\n\t},\n\tT: {\n\t\tshape: [\n\t\t\t[0, 0, 0],\n\t\t\t[\"T\", \"T\", \"T\"],\n\t\t\t[0, \"T\", 0],\n\t\t],\n\t\tcolor: \"132, 61, 198\",\n\t},\n\tZ: {\n\t\tshape: [\n\t\t\t[\"Z\", \"Z\", 0],\n\t\t\t[0, \"Z\", \"Z\"],\n\t\t\t[0, 0, 0],\n\t\t],\n\t\tcolor: \"227, 78, 78\",\n\t},\n};\n\nexport const randomTetromino = () => {\n\tconst tetrominos = \"IJLOSTZ\";\n\tconst randTetromino =\n\t\ttetrominos[Math.floor(Math.random() * tetrominos.length)];\n\treturn TETROMINOS[randTetromino];\n};\n","import { useState, useEffect } from \"react\";\nimport { createStage } from \"./../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n\tconst [stage, setStage] = useState(createStage());\n\tconst [rowsCleared, setRowsCleared] = useState(0);\n\tconst [isSweeping, setIsSweeping] = useState(false);\n\n\tuseEffect(() => {\n\t\tsetRowsCleared(0);\n\n\t\tconst sweepRows = (newStage) =>\n\t\t\tnewStage.reduce((acc, row) => {\n\t\t\t\tif (row.findIndex((cell) => cell[0] === 0) === -1) {\n\t\t\t\t\tsetRowsCleared((prev) => prev + 1);\n\t\t\t\t\tsetIsSweeping(true);\n\t\t\t\t\tacc.unshift(\n\t\t\t\t\t\tnew Array(newStage[0].length).fill([0, \"clear\"])\n\t\t\t\t\t);\n\t\t\t\t\treturn acc;\n\t\t\t\t}\n\t\t\t\tacc.push(row);\n\t\t\t\treturn acc;\n\t\t\t}, []);\n\n\t\tconst updateStage = (prevStage) => {\n\t\t\t// First, flush the stage\n\t\t\tconst newStage = prevStage.map((row) =>\n\t\t\t\trow.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n\t\t\t);\n\n\t\t\t// Then draw the tetronimo\n\t\t\tplayer.tetromino.forEach((row, y) => {\n\t\t\t\trow.forEach((value, x) => {\n\t\t\t\t\tif (value !== 0) {\n\t\t\t\t\t\tnewStage[y + player.pos.y][x + player.pos.x] = [\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t`${player.collided ? \"merged\" : \"clear\"}`,\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Then check if we collided\n\t\t\tif (player.collided) {\n\t\t\t\tresetPlayer();\n\t\t\t\treturn sweepRows(newStage);\n\t\t\t}\n\t\t\treturn newStage;\n\t\t};\n\n\t\tsetStage((prev) => updateStage(prev));\n\t}, [\n\t\tplayer.collided,\n\t\tplayer.pos.x,\n\t\tplayer.pos.y,\n\t\tplayer.tetromino,\n\t\tresetPlayer,\n\t]);\n\treturn [stage, setStage, rowsCleared, isSweeping];\n};\n","import styled, { css, keyframes } from \"styled-components\";\n\nexport const boxShadowSweepEffect = keyframes`\n\t0% {\n\t\tbox-shadow: 4px 4px 16px green;\n\t}\n\t50%{\n\t\tbox-shadow: 4px 4px 16px red;\n\t}\n\t100% {\n\t\tbox-shadow: 4px 4px 16px green;\n\t}\n`;\n\nconst animation = css`\n\tanimation: ${boxShadowSweepEffect} 3s ease-in infinite;\n`;\nexport const StyledCell = styled.div`\n\twidth: auto;\n\tbackground: rgba(${(props) => props.color}, 0.7);\n\tborder: ${(props) => (props.type === 0 ? \"0px solid\" : \"4px solid\")};\n\tborder-bottom-color: rgba(${(props) => props.color}, 0.1);\n\tborder-right-color: rgba(${(props) => props.color}, 1);\n\tborder-top-color: rgba(${(props) => props.color}, 1);\n\tborder-left-color: rgba(${(props) => props.color}, 0.3);\n\tanimation: ${animation};\n`;\n","import React from \"react\";\nimport { StyledCell } from \"./styles/StyledCell\";\nimport { TETROMINOS } from \"./../tetrominos\";\n\nconst Cell = ({ type }) => (\n\t<StyledCell type={type} color={TETROMINOS[type].color} />\n);\n\nexport default React.memo(Cell);\n","import styled from \"styled-components\";\n\nexport const StyledStage = styled.div`\n\tdisplay: grid;\n\tgrid-template-rows: repeat(\n\t\t${(props) => props.height},\n\t\tcalc(25vw / ${(props) => props.width})\n\t);\n\tgrid-template-columns: repeat(${(props) => props.width}, 1fr);\n\tgrid-gap: 1px;\n\tborder: 2px solid #333;\n\twidth: 100%;\n\tmax-width: 25vw;\n\tbackground: #111;\n`;\n","import React from \"react\";\nimport Cell from \"./Cell\";\nimport { StyledStage } from \"./styles/StyledStage\";\n\nconst Stage = ({ stage }) => {\n\treturn (\n\t\t<StyledStage width={stage[0].length} height={stage.length}>\n\t\t\t{stage.map((row) =>\n\t\t\t\trow.map((cell, x) => <Cell key={x} type={cell[0]} />)\n\t\t\t)}\n\t\t</StyledStage>\n\t);\n};\nexport default Stage;\n","import styled from \"styled-components\";\n\nexport const StyledDisplay = styled.div`\n\tbox-sizing: border-box;\n\tdisplay: flex;\n\talign-items: center;\n\tmargin: 0 0 20px 0;\n\tpadding: 20px;\n\tborder: 4px solid #333;\n\tmin-height: 30px;\n\twidth: 100%;\n\tborder-radius: 20px;\n\tcolor: ${(props) => (props.gameOver ? \"red\" : \"#999\")};\n\tbackground: #000;\n`;\n","import { React } from \"react\";\r\nimport { StyledDisplay } from \"./styles/StyledDisplay\";\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n\t<StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import styled from \"styled-components\";\n\nexport const StyledStartButton = styled.button`\n\tbox-sizing: border-box;\n\tmargin: 0 0 20px 0;\n\tpadding: 20px;\n\tmin-height: 30px;\n\twidth: 100%;\n\tborder-radius: 20px;\n\tborder: none;\n\tcolor: white;\n\tbackground: #333;\n`;\n","import React from \"react\";\r\nimport { StyledStartButton } from \"./styles/StyledStartButton\";\r\n\r\nconst StartButton = ({ callback }) => (\r\n\t<StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import React, { useState } from \"react\";\n\nimport { createStage, checkCollision } from \"../gameHelpers\";\n\n// Styled Components\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\";\n\n// Custom Hooks\nimport { useInterval } from \"../hooks/useInterval\";\nimport { usePlayer } from \"../hooks/usePlayer\";\nimport { useStage } from \"../hooks/useStage\";\nimport { useGameStatus } from \"./../hooks/useGameStatus\";\n\n// Components\nimport Stage from \"./Stage\";\nimport Display from \"./Display\";\nimport StartButton from \"./StartButton\";\n\nconst Tetris = () => {\n\tconst INTERVAL_SPEED = 800;\n\tconst [dropTime, setDropTime] = useState(null);\n\tconst [gameOver, setGameOver] = useState(false);\n\n\tconst [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n\tconst [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n\tconst [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n\t\trowsCleared\n\t);\n\n\tconst movePlayer = (dir) => {\n\t\tif (!checkCollision(player, stage, { x: dir, y: 0 })) {\n\t\t\tupdatePlayerPos({ x: dir, y: 0 });\n\t\t}\n\t};\n\n\tconst startGame = () => {\n\t\t// Reset everything\n\t\tsetStage(createStage());\n\t\tsetDropTime(INTERVAL_SPEED);\n\t\tresetPlayer();\n\t\tsetGameOver(false);\n\t\tsetScore(0);\n\t\tsetRows(0);\n\t\tsetLevel(1);\n\t};\n\n\tconst drop = () => {\n\t\t// Increase level when player has cleared 10 rows\n\t\tif (rows > level * 10) {\n\t\t\tsetLevel((prev) => prev++);\n\t\t\t// Also increase speed\n\t\t\tsetDropTime(INTERVAL_SPEED / (level + 1) + 200);\n\t\t}\n\t\tif (!checkCollision(player, stage, { x: 0, y: 1 })) {\n\t\t\tupdatePlayerPos({ x: 0, y: 1, collided: false });\n\t\t} else {\n\t\t\t// Game Over\n\t\t\tif (player.pos.y < 1) {\n\t\t\t\tsetGameOver(true);\n\t\t\t\tsetDropTime(null);\n\t\t\t}\n\t\t\tupdatePlayerPos({ x: 0, y: 0, collided: true });\n\t\t}\n\t};\n\tconst keyUp = ({ keyCode }) => {\n\t\tif (!gameOver) {\n\t\t\tif (keyCode === 40) {\n\t\t\t\tsetDropTime(INTERVAL_SPEED / (level + 1) + 200);\n\t\t\t}\n\t\t}\n\t};\n\tconst dropPlayer = () => {\n\t\tsetDropTime(null);\n\t\tdrop();\n\t};\n\n\tconst move = ({ keyCode }) => {\n\t\tif (!gameOver) {\n\t\t\tif (keyCode === 37) {\n\t\t\t\tmovePlayer(-1);\n\t\t\t} else if (keyCode === 39) {\n\t\t\t\tmovePlayer(1);\n\t\t\t} else if (keyCode === 40) {\n\t\t\t\tdropPlayer();\n\t\t\t} else if (keyCode === 38) {\n\t\t\t\tplayerRotate(stage, 1);\n\t\t\t}\n\t\t}\n\t};\n\n\tuseInterval(() => {\n\t\tdrop();\n\t}, dropTime);\n\n\treturn (\n\t\t<StyledTetrisWrapper\n\t\t\trole=\"button\"\n\t\t\ttabIndex=\"0\"\n\t\t\tonKeyDown={(e) => move(e)}\n\t\t\tonKeyUp={(e) => keyUp(e)}\n\t\t>\n\t\t\t<StyledTetris>\n\t\t\t\t<Stage stage={stage} />\n\t\t\t\t<aside>\n\t\t\t\t\t{gameOver ? (\n\t\t\t\t\t\t<Display gameOver={gameOver} text=\"Game Over\" />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Display text={`Score: ${score}`} />\n\t\t\t\t\t\t\t<Display text={`Rows: ${rows}`} />\n\t\t\t\t\t\t\t<Display text={`Level: ${level}`} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t<StartButton callback={startGame} />\n\t\t\t\t</aside>\n\t\t\t</StyledTetris>\n\t\t</StyledTetrisWrapper>\n\t);\n};\n\nexport default Tetris;\n","import { useCallback, useState } from \"react\";\nimport { randomTetromino, TETROMINOS } from \"./../tetrominos\";\nimport { checkCollision, STAGE_WIDTH } from \"./../gameHelpers\";\n\nexport const usePlayer = () => {\n\tconst [player, setPlayer] = useState({\n\t\tpos: { x: 0, y: 0 },\n\t\ttetromino: TETROMINOS[0].shape,\n\t\tcollided: false,\n\t});\n\n\tconst rotate = (tetromino, dir) => {\n\t\t// Make the rows to become cols (transpose)\n\t\tconst rotatedTetro = tetromino.map((_, index) =>\n\t\t\ttetromino.map((col) => col[index])\n\t\t);\n\t\t// Reverse each row to get a rotated matrix\n\t\tif (dir > 0) return rotatedTetro.map((row) => row.reverse());\n\t\treturn rotatedTetro.reverse();\n\t};\n\n\tconst playerRotate = (stage, dir) => {\n\t\tconst clonedPlayer = JSON.parse(JSON.stringify(player));\n\t\tclonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n\t\tconst pos = clonedPlayer.pos.x;\n\t\tlet offset = 1;\n\t\twhile (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n\t\t\tclonedPlayer.pos.x += offset;\n\t\t\toffset = -(offset + (offset > 0 ? 1 : -1));\n\t\t\tif (offset > clonedPlayer.tetromino[0].length) {\n\t\t\t\trotate(clonedPlayer.tetromino, -dir);\n\t\t\t\tclonedPlayer.pos.x = pos;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tsetPlayer(clonedPlayer);\n\t};\n\n\tconst updatePlayerPos = ({ x, y, collided }) => {\n\t\tsetPlayer((prev) => ({\n\t\t\t...prev,\n\t\t\tpos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n\t\t\tcollided,\n\t\t}));\n\t};\n\n\tconst resetPlayer = useCallback(() => {\n\t\tsetPlayer({\n\t\t\tpos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n\t\t\ttetromino: randomTetromino().shape,\n\t\t\tcollided: false,\n\t\t});\n\t}, []);\n\n\treturn [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n","import { useState, useEffect, useCallback } from \"react\";\n\nexport const useGameStatus = (rowsCleared) => {\n\tconst [score, setScore] = useState(0);\n\tconst [rows, setRows] = useState(0);\n\tconst [level, setLevel] = useState(1);\n\n\tconst calcScore = useCallback(() => {\n\t\tconst linePoints = [40, 100, 300, 1200];\n\t\t// We have score\n\t\tif (rowsCleared > 0) {\n\t\t\t// This is how original Tetris score is calculated\n\t\t\tsetScore((prev) => prev + linePoints[rowsCleared - 1] * level);\n\t\t\tsetRows((prev) => prev + rowsCleared);\n\t\t}\n\t}, [level, rowsCleared]);\n\n\tuseEffect(() => {\n\t\tcalcScore();\n\t}, [calcScore, rowsCleared, score]);\n\treturn [score, setScore, rows, setRows, level, setLevel];\n};\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n\tconst savedCallback = useRef();\r\n\t// Remember the latest callback.\r\n\tuseEffect(() => {\r\n\t\tsavedCallback.current = callback;\r\n\t}, [callback]);\r\n\r\n\t// Set up the interval.\r\n\tuseEffect(() => {\r\n\t\tfunction tick() {\r\n\t\t\tsavedCallback.current();\r\n\t\t}\r\n\t\tif (delay !== null) {\r\n\t\t\tconst id = setInterval(tick, delay);\r\n\t\t\treturn () => {\r\n\t\t\t\tclearInterval(id);\r\n\t\t\t};\r\n\t\t}\r\n\t}, [delay]);\r\n}\r\n","import React from \"react\";\nimport Tetris from \"./components/Tetris\";\n\nconst App = () => (\n\t<div className=\"App\">\n\t\t<Tetris />\n\t</div>\n);\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport(\"web-vitals\").then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t// <React.StrictMode>\n\t<App />,\n\t// </React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}